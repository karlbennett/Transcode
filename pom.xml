<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <modelVersion>4.0.0</modelVersion>

    <name>transcode</name>

    <artifactId>transcode</artifactId>

    <groupId>org.karlbennett</groupId>

    <version>1.0-SNAPSHOT</version>

    <url>http://maven.apache.org</url>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!--This is the directory where all the native source code is kept.-->
        <native.dir>src/main/native/</native.dir>

        <!--This is the directory where all the native test code is kept.-->
        <native.test.dir>src/test/native/</native.test.dir>


        <native.test.resource.dir>src/test/resources/</native.test.resource.dir>

        <!--This is the directory where the compiled native object files will be placed.-->
        <lib.dir>${project.build.outputDirectory}/lib/</lib.dir>

        <lib.test.dir>${project.build.testOutputDirectory}/lib-test/</lib.test.dir>
    </properties>

    <build>

        <!--Set the main source directory, though I don't know if this actually makes much of a difference.-->
        <sourceDirectory>${native.dir}</sourceDirectory>

        <testSourceDirectory>${native.test.dir}</testSourceDirectory>

        <resources>
            <resource>
                <!--Set the resource directory to be the actual source directory, this is done so that maven will package -->
                <!--the source into a source JAR even though it is not Java code.-->
                <directory>${native.dir}</directory>
                <includes>
                    <include>**/*.hpp</include>
                    <include>**/*.cpp</include>
                </includes>
            </resource>
        </resources>

        <testResources>
            <testResource>
                <directory>${native.test.resource.dir}</directory>
                <filtering>false</filtering>
                <targetPath>${lib.test.dir}</targetPath>
            </testResource>
        </testResources>

        <plugins>
            <plugin>
                <!-- Check to make sure that the required native libraries are all installed. -->
                <!-- This is horribly verbose and can maybe be fixed with a custom plugin later. -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>1.1</version>
                <executions>
                    <execution>
                        <id>enforce-libraries</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <evaluateBeanshell>
                                    <condition>
                                        try {

                                            System.loadLibrary("avformat");

                                        } catch ( UnsatisfiedLinkError e ) {

                                            return false;
                                        }

                                        return true;
                                    </condition>
                                    <message>
****
** Error: The libav avformat library is required to build this project.
****
                                    </message>
                                </evaluateBeanshell>
                                <evaluateBeanshell>
                                    <condition>
                                        try {

                                            System.loadLibrary("avcodec");

                                        } catch ( UnsatisfiedLinkError e ) {

                                            return false;
                                        }

                                        return true;
                                    </condition>
                                    <message>
****
** Error: The libav avcodec library is required to build this project.
****
                                    </message>
                                </evaluateBeanshell>
                                <evaluateBeanshell>
                                    <condition>
                                        try {

                                            System.loadLibrary("avutil");

                                        } catch ( UnsatisfiedLinkError e ) {

                                            return false;
                                        }

                                        return true;
                                    </condition>
                                    <message>
****
** Error: The libav avutil library is required to build this project.
****
                                    </message>
                                </evaluateBeanshell>
                                <evaluateBeanshell>
                                    <condition>
                                        try {

                                            System.loadLibrary("x264");

                                        } catch ( UnsatisfiedLinkError e ) {

                                            return false;
                                        }

                                        return true;
                                    </condition>
                                    <message>
****
** Error: The x264 library is required to build this project.
****
                                    </message>
                                </evaluateBeanshell>
                                <evaluateBeanshell>
                                    <condition>
                                        try {

                                            System.loadLibrary("boost_unit_test_framework");

                                        } catch ( UnsatisfiedLinkError e ) {

                                            return false;
                                        }

                                        return true;
                                    </condition>
                                    <message>
****
** Error: The boost test library is required to build this project.
****
                                    </message>
                                </evaluateBeanshell>
                                <evaluateBeanshell>
                                    <condition>
                                        try {

                                            System.loadLibrary("boost_filesystem");

                                        } catch ( UnsatisfiedLinkError e ) {

                                            return false;
                                        }

                                        return true;
                                    </condition>
                                    <message>
****
** Error: The boost filesystem library is required to build this project.
****
                                    </message>
                                </evaluateBeanshell>
                            </rules>
                            <fail>true</fail>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <!-- Exclude the *.cpp files from being packaged in the JAR because this is source code that should only be provided on -->
                <!-- request. -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>2.4</version>
                <configuration>
                    <excludes>
                        <exclude>**/*.cpp</exclude>
                    </excludes>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>

                <executions>
                    <execution>
                        <id>build-native</id>
                        <phase>compile</phase>
                        <configuration>
                            <tasks>
                                <!--We create the native binary output directories with ANT so that the method of creation is -->
                                <!--platform independent.-->
                                <delete dir="${lib.dir}"/>
                                <mkdir dir="${lib.dir}"/>
                                <exec dir="${native.dir}" executable="make" failonerror="true"/>
                            </tasks>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>

                    <execution>
                        <id>clean-native</id>
                        <phase>pre-clean</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <tasks>
                                <exec dir="${native.dir}" executable="make" failonerror="false">
                                    <arg value="clean"/>
                                </exec>
                            </tasks>
                        </configuration>
                    </execution>

                    <execution>
                        <id>build-native-tests</id>
                        <phase>test</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <tasks>
                                <!--We create the native binary output directories with ANT so that the method of creation is -->
                                <!--platform independent.-->
                                <mkdir dir="${lib.test.dir}"/>
                                <exec dir="${native.test.dir}" executable="make" failonerror="true"/>
                            </tasks>
                        </configuration>
                    </execution>

                    <execution>
                        <id>clean-native-tests</id>
                        <phase>pre-clean</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <tasks>
                                <exec dir="${native.test.dir}" executable="make" failonerror="false">
                                    <arg value="clean"/>
                                </exec>
                            </tasks>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <!--Package the native source code up into a source JAR so that other projects can get access to the header files.-->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>2.1.2</version>

                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar-no-fork</goal>
                        </goals>
                    </execution>
                </executions>

                <configuration>
                    <includes>
                        <include>*.hpp</include>
                        <include>*.cpp</include>
                    </includes>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
